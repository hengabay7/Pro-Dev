pipeline {
    agent any

    environment {
        TF_VERSION = "1.6.0"
        TF_DIR = "./Terraform"  
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/hengabay7/Pro-Dev.git'
            }
        }



        stage('Initialize Terraform') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Plan Terraform') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                dir("${TF_DIR}") {
                    input message: 'Apply Terraform changes?', ok: 'Apply'
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage ('Install Terraform') {
            steps {
        sh '''
        if ! command -v terraform &> /dev/null
        then
            wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
            unzip terraform_1.6.0_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
        fi
        terraform --version
        '''
            }
        }

        stage('Build') {
            steps {
                echo "Building Docker image for branch: ${env.BRANCH_NAME}"
                sh "docker build -t appflask:one ./appflask"
            }
        }

        stage('Test Application') {
            steps {                                  
                echo "Running tests using unittest framework"
                sh 'docker run -t appflask:one sh -c "python3 -m unittest discover -s . -p test_app.py"'
            }
        }                

        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                echo "Deploying application from branch: ${env.BRANCH_NAME}"
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed! Check logs for details."
        }
    }
}
