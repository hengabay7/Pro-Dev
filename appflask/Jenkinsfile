pipeline {
    agent any

    environment {
        TF_VERSION = "1.6.0"
        TF_DIR = "Terraform"
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/hengabay7/Pro-Dev.git'
            }
        }

        
        stage('Initialize Terraform') {
            steps {
                dir("${TF_DIR}") {
                    script {
                        def isInitialized = sh(script: "test -d .terraform && echo 'true' || echo 'false'", returnStdout: true).trim()
                        if (isInitialized == 'false') {
                            echo "Terraform is not initialized. Running 'terraform init'..."
                            sh 'terraform init'
                        } else {
                            echo "Terraform is already initialized. Skipping init."
                        }
                    }
                }
            }
        }

        stage('Plan Terraform') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t appflask:one ./appflask"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    docker tag appflask:one hengabay7/appflask:latest
                    docker push hengabay7/appflask:latest
                    """
                }
            }
        }

        stage('Test Application') {
            steps {
                sh 'docker run -t appflask:one sh -c "python3 -m unittest discover -s . -p test_app.py"'
            }
        }

        stage('Fetch Elastic IP') {
            steps {
                script {
            echo "Fetching EC2 Elastic IP..."
            
            def ec2_ip = sh(
                script: """
                aws ec2 describe-addresses --region us-east-1 \
                --filters "Name=instance-id,Values=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)" \
                --query 'Addresses[0].PublicIp' --output text
                """,
                returnStdout: true
            ).trim()

            if (!ec2_ip || ec2_ip == "None") {
                error "❌ No Elastic IP found for this EC2 instance! Please allocate one."
            }

            echo "✅ Elastic IP found: ${ec2_ip}"
            env.EC2_IP = ec2_ip
            }
        }
    }
        stage('Deploy to EC2') {
            steps {
                sshagent(['keypaircicd']) {
                    sh """
                    echo "Deploying to EC2 at ${EC2_IP}..."

                    ssh-keyscan -H ${EC2_IP} >> ~/.ssh/known_hosts
                    ssh ec2-user@${EC2_IP} << 'EOF'
                    docker stop appflask || true
                    docker rm appflask || true
                    docker pull hengabay7/appflask:latest
                    docker run -d --name appflask -p 8080:80 --restart=always hengabay7/appflask:latest
                    docker ps
                    EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline executed successfully!"
        }
        failure {
            echo "❌ Pipeline failed! Check logs for details."
        }
    }
}
